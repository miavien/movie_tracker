from aiogram import types, Router, Dispatcher
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from sqlalchemy import delete

from database.crud import *
from database.database import AsyncSessionLocal
from .keyboards import *

router = Router()


class MovieStates(StatesGroup):
    waiting_for_title = State()
    waiting_for_description = State()


class ReviewStates(StatesGroup):
    waiting_for_movie = State()
    waiting_for_selected_movie = State()
    waiting_for_rating = State()
    waiting_for_comment = State()


class DeleteMovieStates(StatesGroup):
    waiting_for_movie_to_delete = State()
    waiting_for_confirmation = State()
    waiting_for_selected_movie = State()


class UpdateReviewStates(StatesGroup):
    waiting_for_movie_edit = State()
    waiting_for_new_rating = State()
    waiting_for_new_comment = State()
    waiting_for_selected_movie = State()


async def find_and_send_movies(session, message: types.Message, partial_title: str, state: FSMContext):
    movies = await session.scalars(select(Movie).filter(Movie.title.ilike(f'%{partial_title}%')))
    movie_titles = [movie.title for movie in movies]

    if movie_titles:
        movies_message = f'–ù–∞–π–¥–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ —Ñ–∏–ª—å–º—ã:\n' + '\n'.join(
            movie_titles) + '\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å–º –∏–∑ —Å–ø–∏—Å–∫–∞:'
        await message.answer(movies_message)
        await state.update_data(movie_titles=movie_titles)
    else:
        await message.answer('–§–∏–ª—å–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.',
                             reply_markup=main_menu_keyboard)


@router.message(lambda message: message.text == '‚öôÔ∏è –ï—â—ë...')
async def show_additional_menu(message: types.Message):
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:', reply_markup=additional_menu_keyboard)


@router.message(lambda message: message.text == 'üîô –ù–∞–∑–∞–¥')
async def go_back_to_main_menu(message: types.Message):
    await message.answer('–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é:', reply_markup=main_menu_keyboard)


@router.message(Command(commands=['start']))
async def start(message: types.Message):
    async with AsyncSessionLocal() as session:
        async with session.begin():
            user = await set_user(session, message.from_user.id, message.from_user.username,
                                  message.from_user.full_name)
    await message.answer(
        '–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–º–µ—Ç–∫–∏ –æ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö —Ñ–∏–ª—å–º–∞—Ö –∏ –æ—Å—Ç–∞–≤–ª—è—Ç—å –∫ –Ω–∏–º –æ—Ç–∑—ã–≤—ã',
        reply_markup=main_menu_keyboard
    )


@router.message(lambda message: message.text == 'üé• –î–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å–º')
async def add_movie_handler(message: types.Message, state: FSMContext):
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞:')
    await state.set_state(MovieStates.waiting_for_title)


@router.message(MovieStates.waiting_for_title)
async def process_title(message: types.Message, state: FSMContext):
    title = message.text
    await state.update_data(title=title)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞:')
    await state.set_state(MovieStates.waiting_for_description)


@router.message(MovieStates.waiting_for_description)
async def process_description(message: types.Message, state: FSMContext):
    description = message.text
    user_data = await state.get_data()
    title = user_data.get('title')

    async with AsyncSessionLocal() as session:
        async with session.begin():
            telegram_id = message.from_user.id
            movie = await add_movie(session, title, description, telegram_id)

    if movie:
        await message.answer(f"–§–∏–ª—å–º '{title}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!", reply_markup=main_menu_keyboard)
    else:
        await message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ñ–∏–ª—å–º–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.',
                             reply_markup=main_menu_keyboard)

    await state.clear()


@router.message(lambda message: message.text == 'üóíÔ∏è –î–æ–±–∞–≤–∏—Ç—å —Ä–µ—Ü–µ–Ω–∑–∏—é')
async def add_review_handler(message: types.Message, state: FSMContext):
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞:')
    await state.set_state(ReviewStates.waiting_for_movie)


@router.message(ReviewStates.waiting_for_movie)
async def process_movie(message: types.Message, state: FSMContext):
    movie_title = message.text
    async with AsyncSessionLocal() as session:
        movies = await session.scalars(select(Movie).filter(Movie.title.ilike(f'%{movie_title}%')))
        movies_without_review = []
        for movie in movies:
            review = await session.scalar(select(Review).filter_by(movie_id=movie.id))
            if not review:
                movies_without_review.append(movie)

    if movies_without_review:
        movie_titles = [movie.title for movie in movies_without_review]
        await message.answer(
            f'–ù–∞–π–¥–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ —Ñ–∏–ª—å–º—ã:\n' + '\n'.join(movie_titles) + '\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å–º –∏–∑ —Å–ø–∏—Å–∫–∞:')
        await state.update_data(movie_titles=movie_titles)
        await state.set_state(ReviewStates.waiting_for_selected_movie)
    else:
        await message.answer('–ù–µ–¥–æ—Å—Ç—É–ø–Ω—ã–π —Ñ–∏–ª—å–º –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–µ—Ü–µ–Ω–∑–∏–∏.',
                             reply_markup=main_menu_keyboard)
        await state.clear()


@router.message(ReviewStates.waiting_for_selected_movie)
async def process_selected_movie(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    movie_titles = user_data.get('movie_titles', [])
    selected_title = message.text

    if selected_title in movie_titles:
        await state.update_data(selected_title=selected_title)
        await message.answer('–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ñ–∏–ª—å–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ä–µ–π—Ç–∏–Ω–≥ (–æ—Ç 1 –¥–æ 5):')
        await state.set_state(ReviewStates.waiting_for_rating)
    else:
        await message.answer('–û—à–∏–±–∫–∞: –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ñ–∏–ª—å–º –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.',
                             reply_markup=main_menu_keyboard)
        await state.clear()


@router.message(ReviewStates.waiting_for_rating)
async def process_rating(message: types.Message, state: FSMContext):
    rating = message.text
    user_data = await state.get_data()
    selected_title = user_data.get('selected_title')

    if rating.isdigit() and 1 <= int(rating) <= 5:
        await state.update_data(rating=int(rating))
        await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ —Ñ–∏–ª—å–º—É:')
        await state.set_state(ReviewStates.waiting_for_comment)
    else:
        await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥ (–æ—Ç 1 –¥–æ 5).',
                             reply_markup=main_menu_keyboard)
    await state.clear()


@router.message(ReviewStates.waiting_for_comment)
async def process_comment(message: types.Message, state: FSMContext):
    comment = message.text
    user_data = await state.get_data()
    selected_title = user_data.get('selected_title')
    rating = user_data.get('rating')

    async with AsyncSessionLocal() as session:
        movie = await session.scalar(select(Movie).filter_by(title=selected_title))
        if movie:
            review = await add_review(session, message.from_user.id, movie.id, rating, comment)
            if review:
                await message.answer('–í–∞—à –æ—Ç–∑—ã–≤ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω! üéâ',
                                     reply_markup=main_menu_keyboard)
            else:
                await message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.',
                                     reply_markup=main_menu_keyboard)
        else:
            await message.answer('–û—à–∏–±–∫–∞: —Ñ–∏–ª—å–º –Ω–µ –Ω–∞–π–¥–µ–Ω.',
                                 reply_markup=main_menu_keyboard)

    await state.clear()


@router.message(lambda message: message.text == 'üß° –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ —Ñ–∏–ª—å–º–æ–≤')
async def get_my_movies_handler(message: types.Message):
    await message.answer('–ü–æ–ª—É—á–∞—é —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö —Ñ–∏–ª—å–º–æ–≤ –∏ –æ—Ç–∑—ã–≤–æ–≤...')
    telegram_id = message.from_user.id
    async with AsyncSessionLocal() as session:
        result, user = await get_movies_and_reviews(session, telegram_id)
    movies_info = await format_movies_info(result)
    await message.answer(movies_info, reply_markup=main_menu_keyboard)


@router.message(lambda message: message.text == '‚ùå –£–¥–∞–ª–∏—Ç—å —Ñ–∏–ª—å–º')
async def delete_movie_handler(message: types.Message, state: FSMContext):
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:')
    await state.set_state(DeleteMovieStates.waiting_for_movie_to_delete)


@router.message(DeleteMovieStates.waiting_for_movie_to_delete)
async def process_movie_deletion(message: types.Message, state: FSMContext):
    movie_title = message.text
    async with AsyncSessionLocal() as session:
        await find_and_send_movies(session, message, movie_title, state)
        data = await state.get_data()
        movie_titles = data.get('movie_titles', [])
        if movie_titles:
            await state.set_state(DeleteMovieStates.waiting_for_selected_movie)
        else:
            await message.answer('–§–∏–ª—å–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.', reply_markup=main_menu_keyboard)
            await state.clear()
            return


@router.message(DeleteMovieStates.waiting_for_selected_movie)
async def process_movie_selected(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    movie_titles = user_data.get('movie_titles', [])

    if message.text in movie_titles:
        selected_movie_title = message.text
        await message.answer(f'–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ñ–∏–ª—å–º "{selected_movie_title}"? (–î–∞/–ù–µ—Ç)')
        await state.update_data(movie_title=selected_movie_title)
        await state.set_state(DeleteMovieStates.waiting_for_confirmation)
    else:
        await message.answer('–§–∏–ª—å–º –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å–º –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞.',
                             reply_markup=main_menu_keyboard)
        await state.clear()

@router.message(DeleteMovieStates.waiting_for_confirmation)
async def process_movie_confirmation(message: types.Message, state: FSMContext):
    answer = message.text
    user_data = await state.get_data()
    movie_title = user_data.get('movie_title')

    if answer.lower() == '–¥–∞':
        async with AsyncSessionLocal() as session:
            await session.execute(delete(Movie).where(Movie.title == movie_title))
            await session.commit()
        answer = '–§–∏–ª—å–º —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.'
        await state.clear()
    elif answer.lower() == '–Ω–µ—Ç':
        answer = '–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.'
        await state.clear()
    else:
        answer = '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ "–î–∞" –∏–ª–∏ "–ù–µ—Ç".'
    await message.answer(answer, reply_markup=main_menu_keyboard)

@router.message(lambda message: message.text == '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ—Ü–µ–Ω–∑–∏—é')
async def update_review_handler(message: types.Message, state: FSMContext):
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ—Ü–µ–Ω–∑–∏–∏:')
    await state.set_state(UpdateReviewStates.waiting_for_movie_edit)


@router.message(UpdateReviewStates.waiting_for_movie_edit)
async def process_movie_updating(message: types.Message, state: FSMContext):
    movie_title = message.text
    async with AsyncSessionLocal() as session:
        await find_and_send_movies(session, message, movie_title, state)
        data = await state.get_data()
        movie_titles = data.get('movie_titles', [])
        if movie_titles:
            await state.set_state(UpdateReviewStates.waiting_for_selected_movie)
        else:
            await message.answer('–§–∏–ª—å–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ—Ü–µ–Ω–∑–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.')
            await state.clear()

@router.message(UpdateReviewStates.waiting_for_selected_movie)
async def process_selected_movie_updating(message: types.Message, state: FSMContext):
    selected_movie = message.text
    async with AsyncSessionLocal() as session:
        movie = await session.scalar(select(Movie).filter_by(title=selected_movie))
        if movie:
            review = await session.scalar(select(Review).filter_by(movie_id=movie.id))
            if review:
                await message.answer(
                    f'–í–∞—à —Ç–µ–∫—É—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥: {review.rating}\n–í–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {review.comment}\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ä–µ–π—Ç–∏–Ω–≥:')
                await state.update_data(review_id=review.id)
                await state.set_state(UpdateReviewStates.waiting_for_new_rating)

def register_handlers(dp):
    dp.include_router(router)
